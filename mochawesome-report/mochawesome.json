{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-03T06:43:56.939Z",
    "end": "2024-09-03T06:44:07.623Z",
    "duration": 10684,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a94494e5-979f-44a4-a55d-4122782a0a90",
      "title": "",
      "fullFile": "D:\\QA\\mocha-chai\\API-Automation-Mocha\\test\\suites\\booking.suite.js",
      "file": "\\test\\suites\\booking.suite.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8eaa2d74-86d0-45d9-b363-94c00c961609",
          "title": "End to End Testing Booking",
          "fullFile": "D:\\QA\\mocha-chai\\API-Automation-Mocha\\test\\suites\\booking.suite.js",
          "file": "\\test\\suites\\booking.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"End to End Testing Booking\"",
              "fullTitle": "End to End Testing Booking \"before all\" hook in \"End to End Testing Booking\"",
              "timedOut": false,
              "duration": 2327,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\n\ntry {\n    const responseToken = await createToken();\n    expect(responseToken.status).to.equal(200); // Validasi status code\n    token = responseToken.body.token;  // Ambil token dari response\n    expect(token).to.be.a('string');   // Pastikan token adalah string\n    expect(responseToken.body).to.have.property('token'); // Assertion tambahan: Memastikan response body memiliki property 'token'\n    console.log(\"Token:\", token);  \n} catch (error) {\n    console.error(\"Error in before hook:\", error);\n    throw error;  // Pastikan error dilemparkan agar Mocha mengetahui adanya kegagalan\n}",
              "err": {},
              "uuid": "80ebfb08-8330-4140-919a-690a7c528cd3",
              "parentUUID": "8eaa2d74-86d0-45d9-b363-94c00c961609",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success Create An Booking",
              "fullTitle": "End to End Testing Booking Success Create An Booking",
              "timedOut": false,
              "duration": 2081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await createAnBooking.booking()\nexpect((await response).status).to.equal(200) // Assertion: Memastikan status code adalah 200\nbookingId = (await response).body.bookingid\nexpect(response.body).to.have.property('bookingid'); // Assertion tambahan: Memastikan response body memiliki property 'bookingid'\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "3acc93b8-fae4-4ec6-b288-fbe3b0ec931e",
              "parentUUID": "8eaa2d74-86d0-45d9-b363-94c00c961609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succes Get Booking by Id",
              "fullTitle": "End to End Testing Booking Succes Get Booking by Id",
              "timedOut": false,
              "duration": 2100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getBooking.id(bookingId)\nexpect((await response).status).to.equal(200) // Assertion: Memastikan status code adalah 200\nexpect(response.body).to.have.property('firstname'); // Assertion tambahan: Memastikan response body memiliki property 'firstname'\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "dfc76963-01c5-40aa-a5b3-3078afa24eb8",
              "parentUUID": "8eaa2d74-86d0-45d9-b363-94c00c961609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success Update Booking by Id",
              "fullTitle": "End to End Testing Booking Success Update Booking by Id",
              "timedOut": false,
              "duration": 2143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await updateBooking(bookingId, token)\nexpect((await response).status).to.equal(200); // Assertion: Memastikan status code adalah 200\nexpect(response.body).to.have.property('firstname').that.equals(\"James\"); // Assertion tambahan: Memastikan bookingid yang diperbarui sesuai dengan bookingId\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "3c1709e6-68a9-43e0-b54a-5aa5d0a38ee6",
              "parentUUID": "8eaa2d74-86d0-45d9-b363-94c00c961609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Positive - Success Delete a Booking by ID",
              "fullTitle": "End to End Testing Booking Positive - Success Delete a Booking by ID",
              "timedOut": false,
              "duration": 2010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteAnBooking.e2e(bookingId, token)\nexpect((await response).status).to.equal(201);\nconsole.log(\"Status Code:\", (await response).status);  // Menampilkan status kode\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body); // Menampilkan isi dari response body",
              "err": {},
              "uuid": "ebc44e2f-0a4a-42a9-b31c-5775dbd9034f",
              "parentUUID": "8eaa2d74-86d0-45d9-b363-94c00c961609",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3acc93b8-fae4-4ec6-b288-fbe3b0ec931e",
            "dfc76963-01c5-40aa-a5b3-3078afa24eb8",
            "3c1709e6-68a9-43e0-b54a-5aa5d0a38ee6",
            "ebc44e2f-0a4a-42a9-b31c-5775dbd9034f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8334,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}