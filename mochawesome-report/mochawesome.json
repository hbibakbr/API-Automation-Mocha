{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-03T06:15:30.585Z",
    "end": "2024-09-03T06:15:41.156Z",
    "duration": 10571,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a3a60b2c-d2d2-4e76-bca4-405ea400408d",
      "title": "",
      "fullFile": "D:\\QA\\mocha-chai\\API-Automation-Mocha\\test\\suites\\booking.suite.js",
      "file": "\\test\\suites\\booking.suite.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
          "title": "End to End Testing Booking",
          "fullFile": "D:\\QA\\mocha-chai\\API-Automation-Mocha\\test\\suites\\booking.suite.js",
          "file": "\\test\\suites\\booking.suite.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"End to End Testing Booking\"",
              "fullTitle": "End to End Testing Booking \"before all\" hook in \"End to End Testing Booking\"",
              "timedOut": false,
              "duration": 2344,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\n\ntry {\n    const responseToken = await createToken();\n    expect(responseToken.status).to.equal(200); // Validasi status code\n    token = responseToken.body.token;  // Ambil token dari response\n    expect(token).to.be.a('string');   // Pastikan token adalah string\n    console.log(\"Token:\", token);  \n} catch (error) {\n    console.error(\"Error in before hook:\", error);\n    throw error;  // Pastikan error dilemparkan agar Mocha mengetahui adanya kegagalan\n}",
              "err": {},
              "uuid": "402be7f8-72b9-4ad3-83f8-cf0d2c98e535",
              "parentUUID": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success Create An Booking",
              "fullTitle": "End to End Testing Booking Success Create An Booking",
              "timedOut": false,
              "duration": 2059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await createAnBooking.booking()\nexpect((await response).status).to.equal(200)\nbookingId = (await response).body.bookingid\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "87bf2a5f-a5f6-47c4-9476-d3320ea39b66",
              "parentUUID": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succes Get Booking by Id",
              "fullTitle": "End to End Testing Booking Succes Get Booking by Id",
              "timedOut": false,
              "duration": 2099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getBooking.id(bookingId)\nexpect((await response).status).to.equal(200)\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "36994d33-8655-4737-b0b9-55fc61b7a836",
              "parentUUID": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success Update Booking by Id",
              "fullTitle": "End to End Testing Booking Success Update Booking by Id",
              "timedOut": false,
              "duration": 2006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await updateBooking(bookingId, token)\nexpect((await response).status).to.equal(200);\nconsole.log(\"Status Code:\", (await response).status);\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body);",
              "err": {},
              "uuid": "1349f003-9541-4bff-bc36-0dc2d7d13680",
              "parentUUID": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Positive - Success Delete a Booking by ID",
              "fullTitle": "End to End Testing Booking Positive - Success Delete a Booking by ID",
              "timedOut": false,
              "duration": 2033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await deleteAnBooking.e2e(bookingId, token)\nexpect((await response).status).to.equal(201);\nconsole.log(\"Status Code:\", (await response).status);  // Menampilkan status kode\nconsole.log(\"Booking Id: \", bookingId);\nconsole.log(\"Response Body:\", (await response).body); // Menampilkan isi dari response body",
              "err": {},
              "uuid": "08b9022d-a43c-4610-901f-d09099b4334c",
              "parentUUID": "79d32cbc-7d49-4909-b37f-a4b3e259438d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87bf2a5f-a5f6-47c4-9476-d3320ea39b66",
            "36994d33-8655-4737-b0b9-55fc61b7a836",
            "1349f003-9541-4bff-bc36-0dc2d7d13680",
            "08b9022d-a43c-4610-901f-d09099b4334c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}